/**
* @file     Credentials.h
* @author   Armin P Pressler (app@gmx.at)
* @brief    - adaption to M5Atom (basic set of credentials, no save to SPIFFS!)  
* @version  0.3
* @date     2022-08-30
* 
* @copyright Copyright (c) 2022
* 
*/

#include <Arduino.h>
#include "Credentials.h"

namespace Credentials // https://stackoverflow.com/questions/2483978/best-way-to-implement-globally-scoped-data
{
        // --- Global ---
        bool RESTART_ESP = false;                     // not stored in aWOT, only global var!
        char SETTINGS_FILENAME[35] = "/Settings.ini"; // SPIFFS  - must not be set in web server app!
        bool USE_DEEP_SLEEP;                          //

        // --- Logfile ---
        bool LOG_TO_SERIAL = true; // DEBUG
        bool LOG_TO_TFT;           // = true;
        bool LOG_TO_FILE;          // = true;

        bool ENABLE_LOG_DEBUG = true;   // DEBUG
        bool ENABLE_LOG_ERROR = true;   // DEBUG
        bool ENABLE_LOG_WARNING = true; // DEBUG
        bool ENABLE_LOG_INFO = true;    // DEBUG

        // --- Mesurement ---
        // --- Communication Settings ---
        bool AP_ENABLED;   // only for webserver (settings, fast measurement,...)
        bool WIFI_ENABLED; // only for webserver (settings, fast measurement,...)

        // --- MESH ---
        // --- MODBUS ---

        // --- Network ---
        char ESP_HOSTNAME[35];

        char AP_SSID[25];
        char AP_PASSWORD[25]; // minimum 8 chars (Android!)
        char AP_STATIC_IP[25];
        char AP_STATIC_SN[25];

        char WIFI_SSID[25];
        char WIFI_PASSWORD[25];
        bool WIFI_DHCP = true;
        char WIFI_STATIC_IP[25];
        char WIFI_STATIC_SN[25];
        char WIFI_STATIC_GW[25];
        char WIFI_STATIC_DNS[25];
}

void setDefaultSettingValues()
// start with default values if something goes wrong...
// only the required ones
//
{
        Credentials::RESTART_ESP = false; // Firmware Update
        // unique ID is added as last 4 bytes of MAC in Network.cpp
        strlcpy(Credentials::ESP_HOSTNAME,          // <- destination
                "M5Atom_Boilerplate_",                          // <- source & alternative Value if parsing error!
                sizeof(Credentials::ESP_HOSTNAME)); // <- size
        // unique ID is added as last 4 bytes of MAC in Network.cpp
        strlcpy(Credentials::AP_SSID, "M5Atom_Boilerplate_", sizeof(Credentials::AP_SSID));
        strlcpy(Credentials::AP_PASSWORD, "123456789", sizeof(Credentials::AP_PASSWORD));
        strlcpy(Credentials::AP_STATIC_IP, "10.0.0.5", sizeof(Credentials::AP_STATIC_IP));
        strlcpy(Credentials::AP_STATIC_SN, "255.255.255.0", sizeof(Credentials::AP_STATIC_SN));
        Credentials::AP_ENABLED = true;
        Credentials::LOG_TO_SERIAL = true; // important!
        Credentials::ENABLE_LOG_INFO = true;
        Credentials::ENABLE_LOG_WARNING = true;
        Credentials::ENABLE_LOG_ERROR = true;
        Credentials::ENABLE_LOG_DEBUG = true;
}

void JsonToGlobalSettings(const JsonDocument &SETTINGS)
// store the latest SETTINGS-JSON into global variables!
// https://github.com/bblanchon/ArduinoJson/issues/989
// https://arduinojson.org/v6/example/config/
{

        // --- Global ---
        strlcpy(Credentials::SETTINGS_FILENAME,
                SETTINGS["SETTINGS_FILENAME"] | "/Settings.ini", // default value
                sizeof(Credentials::SETTINGS_FILENAME));
        Credentials::USE_DEEP_SLEEP = SETTINGS["USE_DEEP_SLEEP"] | false;

        // --- Logfile ---
        Credentials::LOG_TO_SERIAL = SETTINGS["LOG_TO_SERIAL"] | true;
        Credentials::LOG_TO_TFT = SETTINGS["LOG_TO_TFT"] | false;
        Credentials::LOG_TO_FILE = SETTINGS["LOG_TO_FILE"] | false;

        Credentials::ENABLE_LOG_DEBUG = SETTINGS["ENABLE_LOG_DEBUG"] | true;
        Credentials::ENABLE_LOG_ERROR = SETTINGS["ENABLE_LOG_ERROR"] | true;
        Credentials::ENABLE_LOG_WARNING = SETTINGS["ENABLE_LOG_WARNING"] | true;
        Credentials::ENABLE_LOG_INFO = SETTINGS["ENABLE_LOG_INFO"] | true;

        // --- Mesurement ---
        // --- Communication Settings ---
        Credentials::AP_ENABLED = SETTINGS["AP_ENABLED"] | false;
        Credentials::WIFI_ENABLED = SETTINGS["WIFI_ENABLED"] | false;

        // --- MESH ---

        // --- MODBUS ---

        // --- Network ---
        strlcpy(Credentials::ESP_HOSTNAME,
                SETTINGS["ESP_HOSTNAME"] | "Heater_1", // INFO Test
                sizeof(Credentials::ESP_HOSTNAME));

        strlcpy(Credentials::AP_SSID,
                SETTINGS["AP_SSID"] | "HEATER_AP", // INFO Test
                sizeof(Credentials::AP_SSID));
        strlcpy(Credentials::AP_PASSWORD,
                SETTINGS["AP_PASSWORD"] | "123456789", // INFO Test
                sizeof(Credentials::AP_PASSWORD));
        strlcpy(Credentials::AP_STATIC_IP,
                SETTINGS["AP_STATIC_IP"] | "10.0.0.28", // INFO Test
                sizeof(Credentials::AP_STATIC_IP));
        strlcpy(Credentials::AP_STATIC_SN,
                SETTINGS["AP_STATIC_SN"] | "255.255.255.0", // INFO Test
                sizeof(Credentials::AP_STATIC_SN));

        strlcpy(Credentials::WIFI_SSID,
                SETTINGS["WIFI_SSID"] | "n/a",
                sizeof(Credentials::WIFI_SSID));
        strlcpy(Credentials::WIFI_PASSWORD,
                SETTINGS["WIFI_PASSWORD"] | "n/a",
                sizeof(Credentials::WIFI_PASSWORD));
        Credentials::WIFI_DHCP = SETTINGS["WIFI_DHCP"] | true; // INFO Test
        strlcpy(Credentials::WIFI_STATIC_IP,
                SETTINGS["WIFI_STATIC_IP"] | "192.168.66.128",
                sizeof(Credentials::WIFI_STATIC_IP));
        strlcpy(Credentials::WIFI_STATIC_SN,
                SETTINGS["WIFI_STATIC_SN"] | "255.255.255.0",
                sizeof(Credentials::WIFI_STATIC_SN));
        strlcpy(Credentials::WIFI_STATIC_GW,
                SETTINGS["WIFI_STATIC_GW"] | "192.168.66.1",
                sizeof(Credentials::WIFI_STATIC_GW));
        strlcpy(Credentials::WIFI_STATIC_DNS,
                SETTINGS["WIFI_STATIC_DNS"] | "8.8.8.8",
                sizeof(Credentials::WIFI_STATIC_DNS));
}

void GlobalSettingsToJson(JsonDocument &SETTINGS)
// create a new SETTINGS-JSON from global variables to send it
// https://github.com/bblanchon/ArduinoJson/issues/989
// https://arduinojson.org/v6/example/config/
{

        // --- Global ---
        SETTINGS["bReboot"] = Credentials::RESTART_ESP;
        SETTINGS["USE_DEEP_SLEEP"] = Credentials::USE_DEEP_SLEEP;

        // --- Logfile ---
        SETTINGS["LOG_TO_SERIAL"] = Credentials::LOG_TO_SERIAL;
        SETTINGS["LOG_TO_TFT"] = Credentials::LOG_TO_TFT;
        SETTINGS["LOG_TO_FILE"] = Credentials::LOG_TO_FILE;

        SETTINGS["ENABLE_LOG_DEBUG"] = Credentials::ENABLE_LOG_DEBUG;
        SETTINGS["ENABLE_LOG_ERROR"] = Credentials::ENABLE_LOG_ERROR;
        SETTINGS["ENABLE_LOG_WARNING"] = Credentials::ENABLE_LOG_WARNING;
        SETTINGS["ENABLE_LOG_INFO"] = Credentials::ENABLE_LOG_INFO;

        // --- Mesurement ---

        // --- Communication Settings ---
        SETTINGS["AP_ENABLED"] = Credentials::AP_ENABLED;
        SETTINGS["WIFI_ENABLED"] = Credentials::WIFI_ENABLED;

        // --- MESH ---

        // --- MODBUS ---

        // --- Network ---
        SETTINGS["ESP_HOSTNAME"] = Credentials::ESP_HOSTNAME;

        SETTINGS["AP_SSID"] = Credentials::AP_SSID;
        SETTINGS["AP_PASSWORD"] = Credentials::AP_PASSWORD;
        SETTINGS["AP_STATIC_IP"] = Credentials::AP_STATIC_IP;
        SETTINGS["AP_STATIC_SN"] = Credentials::AP_STATIC_SN;

        SETTINGS["WIFI_SSID"] = Credentials::WIFI_SSID;
        SETTINGS["WIFI_PASSWORD"] = Credentials::WIFI_PASSWORD;
        SETTINGS["WIFI_DHCP"] = Credentials::WIFI_DHCP;
        SETTINGS["WIFI_STATIC_IP"] = Credentials::WIFI_STATIC_IP;
        SETTINGS["WIFI_STATIC_SN"] = Credentials::WIFI_STATIC_SN;
        SETTINGS["WIFI_STATIC_GW"] = Credentials::WIFI_STATIC_GW;
        SETTINGS["WIFI_STATIC_DNS"] = Credentials::WIFI_STATIC_DNS;
}